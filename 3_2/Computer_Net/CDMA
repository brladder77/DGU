#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <malloc.h>
#include <math.h>
#include <time.h>

void main(void) // 메인 함수 
{
	srand(time(NULL));
	int i, j, k, l, m, n; // 정수형 변수 선언 
	int tx, row, a, b; // 정수형 변수 선언
	int** cdata; // data 2차원 포인터 변수 선언 
	int** chip; // chip 2차원 포인터 변수 선언 
	int** Filter; // Filter 2차원 포인터 변수 선언 
	int c2[2][2]; // 2*2 배열 선언(chip 2단 저장)
	int data[64]; // 64비트 데이터 배열 선언
	int join[64] = { 0 }; // join 데이터 배열 생성
	int Odata[64] = { 0 }; //original 데이터 배열 생성

	// Transmitter(user)와 Data 길이 입력 
	printf("-------- CDMA --------\n\n"); // 출력 
	printf("Input Transmitter (range: 2-64): "); // 출력 
	scanf("%d", &tx); // tx(User)를 입력 받음(2~64) 
	printf("\nInput Chip Sequence Length : "); // 출력 
	scanf("%d", &row); // Chip Sequence의 길이를 입력 받음 

// Chip Sequence Generator 
	c2[0][0] = 1; // 기본적으로 2단 chip sequence를 배열에 저장 
	c2[0][1] = 1; // chip 2단을 바탕으로 chip sequence 생성 
	c2[1][0] = 1;
	c2[1][1] = -1;
	printf("\nChip Sequence Table\n"); // 출력 
	chip = (int**)malloc(sizeof(int*) * row); // row 행의 chip 동적 배열 생성 
	for (i = 0; i < row; i++) // row 동안 반복 
	{
		chip[i] = (int*)malloc(sizeof(int) * row); // 각 행마다 row 만큼의 열 생성 
	}
	for (i = 0; i < 2; i++) // 2번 반복 
	{
		for (j = 0; j < 2; j++) // 2번 반복 
		{
			chip[i][j] = c2[i][j]; // chip sequence에 기본 2단 배열을 집어넣음 
		}
	}
	m = 1; // m=1로 초기화 
	while (m < log(row) / log(2)) // m이 log(2)row 보다 작을때 까지 반복 
	{
		b = pow(2, m); // temp2 
		for (k = 0; k < 2; k++) // 2번 반복(기본 chip sequence가 2단임) 
		{
			for (l = 0; l < 2; l++) // 2번 반복(기본 chip sequence가 2단임) 
			{
				for (i = 0; i < b; i++) // b 동안 반복 
				{
					for (j = 0; j < b; j++) // b 동안 반복 
					{
						chip[k * b + i][l * b + j] = c2[k][l] * chip[i][j]; // chip sequence 생성 
					}
				}
			}
		}
		m++; // m을 1씩 증가 시킴 
	}
	for (i = 0; i < tx; i++) // tx 동안 반복 
	{
		printf("t%d(chip) : ", i);	// 할당된 chip sequence 출력
		for (j = 0; j < row; j++) // row 동안 반복 
		{
			printf("%4d", chip[i + 1][j]); // chip sequence 출력 
		}
		printf("\n"); // 한줄 밑으로 내림 
	}

	// Original Data
	for (i = 0; i < tx; i++) // tx 동안 반복 
	{
		data[i] = rand() % 3 - 1;	// 보낼 데이터 생성
	}
	printf("\n-------- Original Data --------\n"); // 출력
	for (i = 0; i < tx; i++) // tx 동안 반복 
	{
		printf("%4d", data[i]);	// 보내는 데이터 출력
	}
	printf("\n"); // 한줄 밑으로 내림 

	// Transmitter
	cdata = (int**)malloc(sizeof(int*) * tx); // tx 행의 cdata 동적 배열 생성 
	for (i = 0; i < tx; i++) // tx 동안 반복 
	{
		cdata[i] = (int*)malloc(sizeof(int) * row); // 각 행마다 row 만큼의 열 생성 
	}
	for (i = 0; i < tx; i++) // tx 동안 반복 
	{
		for (j = 0; j < row; j++) // row 동안 반복 
		{
			cdata[i][j] = data[i] * chip[i + 1][j]; // 송신할 데이터 chip과 결합
		}
	}
	printf("\n-------- Transmitter Process --------\n"); // 출력 
	for (i = 0; i < tx; i++) // tx 동안 반복 
	{
		printf("t%d : ", i); // 출력 
		for (j = 0; j < row; j++) // row 동안 반복 
		{
			printf("%4d", cdata[i][j]); // cdata 배열의 내용 출력 
		}
		printf("\n"); // 한줄 밑으로 내림 
	}

	// Joining 
	for (i = 0; i < row; i++) // row 동안 반복
	{	
		for (j = 0; j < tx; j++) // tx 동안 반복
		{
			join[i] += cdata[j][i]; // tx 에서 받은 신호 결합
		}
	}
	printf("\n-------- Joiner Process --------\n"); // 출력 
	for (i = 0; i < row; i++) // row 동안 반복
	{
		printf("%4d", join[i]); //결합된 신호 출력
	}
	printf("\n"); // 한줄 밑으로 내림 

	// receiving
	Filter = (int**)malloc(sizeof(int*) * tx); // tx 행의 동적 배열 생성 
	for (i = 0; i < tx; i++) // tx 동안 반복 
	{
		Filter[i] = (int*)malloc(sizeof(int) * row); // 각 행마다 row 만큼의 열 생성 
	}
	for (i = 0; i < tx; i++) // tx 동안 반복
	{
		for (j = 0; j < row; j++) { // row 동안 반복
			Filter[i][j] = join[j] * chip[i + 1][j]; //receiver에서 원하는 신호만 걸러냄
			Odata[i] += Filter[i][j]; // 비트 계산
		}
		Odata[i] = Odata[i] / row; //표준 출력
	}
	printf("\n-------- Receiver Process --------\n"); // 출력 
	for (i = 0; i < tx; i++) { // tx동안 반복
		printf("r%d : %d\n", i, Odata[i]); // 표준 출력 
	}
}
