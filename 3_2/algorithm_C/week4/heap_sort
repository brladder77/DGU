#include <stdio.h>
#define SWAP(x, y, t) ((t)=(x), (x)=(y), (y)=(t))

void HeapSort(int[], int);
void MaxHeap(int[], int);
void HeapAlign(int[], int, int);

int main()
{
	int length;
	int arr[10] = { 4,1,3,2,16,9,10,14,8,7 };
	
	puts("초기 배열");
	for (int i = 0; i < 10; i++) {
		printf("%d ", arr[i]);
	}
	puts("");

	length = sizeof(arr) / sizeof(int);

	MaxHeap(arr, length);
	puts("\n배열 생성");
	for (int i = 0; i < 10; i++) {
		printf("%d ", arr[i]);
	}
	puts("");

	HeapSort(arr, length);
	puts("\n힙 정렬 완료");
	for (int i = 0; i < 10; i++) {
		printf("%d ", arr[i]);
	}
	puts("");

	return 0;
}

// HeapSort 힙 정렬

void HeapSort(int arr[], int length) {

	int* temp;
	int i;

	MaxHeap(arr, length);			// 힙 생성
	for (i = length - 1; i >= 0; i--) {
		SWAP(arr[0], arr[i], temp);		// 부모노드와 마지막 노드와 SWAP
		length--;				// 부모노드를 삭제.
		HeapAlign(arr, 0, length);		// 힙 정비
	}
}


// MaxHeap 힙 생성

void MaxHeap(int arr[], int length) {

	int parent_position;

	for (parent_position = length / 2 - 1; parent_position >= 0; parent_position--) {
		HeapAlign(arr, parent_position, length);	// 힙 정비
	}
}

// MaxAlign 힙 정비

void HeapAlign(int arr[], int parent_position, int heap_size) {

	int* temp;
	int left, right, largest;

	left = 2 * parent_position + 1;
	right = 2 * parent_position + 2;

	if ((left < heap_size) && (arr[left] > arr[parent_position])) // 왼쪽 자식 노드와 부모노드 비교.
		largest = left;
	else
		largest = parent_position;

	if ((right < heap_size) && (arr[right] > arr[largest]))	// 오른쪽 자식노드와 이전에 얻은 제일 큰 노드 값과 비교.
		largest = right;

	if (largest != parent_position) {
		SWAP(arr[parent_position], arr[largest], temp);	// 값이 큰 노드를 부모노드로 SWAP.
		HeapAlign(arr, largest, heap_size);	// 재정비
	}
}
