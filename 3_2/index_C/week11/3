#include <stdio.h>
#define MAX_SIZE 100

typedef struct {	//힙 노드
	int key;
}element;

typedef struct {	//힙 배열
	element heap[MAX_SIZE];
	int size;
}Heap;

void max_heap_insert(Heap* h, element item) {	//힙 노드 삽입
	int i;
	i = ++(h->size);

	//마지막 자리부터 부모 노드와 비교하며 더 크다면 자리 교체 후 삽입
	while ((i != 1) && (item.key > h->heap[i / 2].key)) {
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}

	h->heap[i] = item;
}

element max_heap_delete(Heap* h) {	//힙 삭제
	int parent, child;
	element item, temp;

	item = h->heap[1];	//삭제할 루트 힙 노드 item에 저장
	temp = h->heap[(h->size)--];	//마지막 힙 노드 temp에 저장 후 사이즈 하나 줄여줌
	parent = 1;
	child = 2;

	while (child <= h->size) { //마지막 레벨 넘어서기 전까지 반복
		//왼쪽 자식이 오른쪽 자식보다 더 작을 경우
		if ((child < h->size) && ((h->heap[child].key) < (h->heap[child + 1].key))) {
			child++;
		}
		if (temp.key >= h->heap[child].key) break;

		//부모와 자식 교환
		h->heap[parent] = h->heap[child];
		//한 레벨 아래로 이동
		parent = child;
		child *= 2;
	}
	//마지막 노드를 재설정 위치에 삽입
	h->heap[parent] = temp;

	return item;	//삭제 노드 반환
}

void max_heap_search(Heap* h, element item) {	//힙 탐색

	int i, level=0;
	for (i = 1; i <= h->size; i++) {
		if (h->heap[i].key == item.key) {
			for (int j = i; j > 0; j=j / 2) {
				level++;
			}
			printf("%d 는 레벨 %d에 위치\n", h->heap[i].key, level);
			return;
		}
	}
	puts("힙에 존재하지 않습니다.");
}

void max_heap_display(Heap* h) {	//힙 출력

	int i;
	for (i = 1; i <= h->size; i++) {
		printf("%d ", h->heap[i].key);
	}
	puts("");
}

int main() {
	Heap max_heap;
	max_heap.size = 0;
	element item;

	item.key = 7;
	max_heap_insert(&max_heap, item);
	max_heap_display(&max_heap);

	item.key = 73;
	max_heap_insert(&max_heap, item);
	max_heap_display(&max_heap);

	item.key = 2;
	max_heap_insert(&max_heap, item);
	max_heap_display(&max_heap);

	item = max_heap_delete(&max_heap);
	max_heap_display(&max_heap);

	item.key = 9;
	max_heap_insert(&max_heap, item);
	max_heap_display(&max_heap);

	item.key = 22;
	max_heap_insert(&max_heap, item);
	max_heap_display(&max_heap);

	item.key = 1;
	max_heap_insert(&max_heap, item);
	max_heap_display(&max_heap);

	item = max_heap_delete(&max_heap);
	max_heap_display(&max_heap);

	item.key = 8;
	max_heap_insert(&max_heap, item);
	max_heap_display(&max_heap);

	item.key = 88;
	max_heap_insert(&max_heap, item);
	max_heap_display(&max_heap);

	item = max_heap_delete(&max_heap);
	max_heap_display(&max_heap);

	item.key = 7;
	max_heap_search(&max_heap, item);

	return 0;
}


