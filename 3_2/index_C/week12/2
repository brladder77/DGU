#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable : 4996)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_V 6	//정점 수
#define TRUE 1	//방문
#define FALSE 0	//미방문

typedef struct VERTEX {
	char name[5];	//정점 이름
	char distance[10];	//정점까지의 거리(문자)
	int idistance[MAX_V];	//정점까지의 거리 정수 배열
}Vertex;

Vertex Sub[10] = { 0, };

int weight[MAX_V][MAX_V];
int record[MAX_V][MAX_V];
int distance[MAX_V];
int found[MAX_V];
void shortest_path(int start, int n);

void makeG(FILE*);
int move(int distance[], int n, int found[]);
void init_weight(int n);
void init_record(int n);
void display(int start, int n);
int translate(char* str);

int main() {

	FILE* fp = fopen("problem2.txt", "r");

	makeG(fp);	//정점간 거리 정보 자료구조로 변환

	fclose(fp);

	char x[5];
	int st;

	//출발정점 도착정점 이름 입력받아 각 정점에 부여된 번호로 변환
	printf("출발정점 : "); scanf("%s", x);

	st = translate(x);

	init_weight(MAX_V);	//weight배열 초기화
	init_record(MAX_V);	//record배열 초기화

	shortest_path(st, MAX_V);

	display(st, MAX_V);

	return 0;
}


void makeG(FILE* ifp) {	//정점간 거리 정보 자료구조로 변환
	char c;
	int snum = 0, j = 0, k = 0, l = 0, space = 0;	//space 통해 이름인지 정점간 거리인지 구별
	int vertexs = 0;

	while (1) {
		c = fgetc(ifp);
		if (feof(ifp)) {	//파일 끝까지 읽었을 경우 while 문 탈출
			Sub[snum].name[j] = '\0';
			Sub[snum].distance[k] = '\0';
			break;
		}
		if (c == '\t') {	//정점간 거리 tab로 구별
			if (space == 1) {	//space 1인 경우 정점간거리 저장한 상태이므로 정수로 변환
				Sub[snum].distance[k] = '\0';
				Sub[snum].idistance[vertexs] = strtol(Sub[snum].distance,NULL,10);
				vertexs++;
				k = 0;
			}
			space = 1;
		}
		else if (c == '\n') {	//다음줄로 넘어갈 때 각 문자열들 끝맺어줌
			Sub[snum].name[j] = '\0';
			Sub[snum].distance[k] = '\0';
			Sub[snum].idistance[vertexs] = strtol(Sub[snum].distance,NULL,10);	//정점간 거리 정보(문자) 정수로 변환
			vertexs = 0;	//하나의 정점에서 다른 모든 정점까지의 거리 뽑아냈으므로 vertexs 다시 초기화
			snum++; j = 0, k = 0, l = 0;
			space = 0;
		}
		else if (space == 0) {	//정점 이름 정보
			Sub[snum].name[j] = c;
			j++;
		}
		else if (space == 1) {
			Sub[snum].distance[k] = c;
			k++;
		}
	}

	int t;
	for (t = 0; t <= snum; t++) {	//저장한 구조체 출력
		printf("%s\t", Sub[t].name);
		for (int ss = 0; ss < MAX_V; ss++) {
			printf("%d\t", Sub[t].idistance[ss]);
		}
		puts("");
	}
	puts("");
}

int move(int distance[], int n, int found[]) {	//연결정점 중 거리가 가장 짧은 정점으로 이동
	int i, min, minpos;
	min = INT_MAX;	//초기 거리 최대값 투입
	minpos = -1;

	for (i = 0; i < n; i++)
		if (distance[i] < min && !found[i]) {	//자신 제외 가장 가까운 정점 탐색
			min = distance[i];
			minpos = i;	//가장 가까운 정점 번호로 변경
		}

	return minpos;	//이동한 가장 가까운 정점 번호 return 
}

void init_weight(int n) {	//weight배열 초기화

	int i, j;
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++)
			weight[i][j] = Sub[i].idistance[j];	//정점간 거리 데이터 투입
	}
}

void init_record(int n) {	//record배열 초기화

	int i, j;
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++)
			record[i][j] = INT_MIN;
	}
}

void shortest_path(int start, int n) {

	int i, j, u, w;

	for (i = 0; i < n; i++) {

		if (weight[start][i] != 9999) {	//시작정점과 연결된 정점(i) 발견시(혹은 자신)
			record[i][0] = start;	//연결된 정점 레코드(i)의 첫 인덱스에 시작정점 번호 기록
			record[i][1] = i;	//다음 인덱스에 연결된 정점 번호(i) 기록 (시작정점에서 연결된 정점(i)로의 이동을 record에 기록하는 과정)
		}

		distance[i] = weight[start][i];	//distance에 시작정점에서부터 다른 정점까지의 거리 넣어준다

		found[i] = FALSE;	//found에 전부 false 넣어줌

	}

	found[start] = TRUE;	//시작정점 found 인덱스는 true로 변경
	distance[start] = 0;	//자신 distance 0

	for (i = 0; i < n - 2; i++) {	//본인과 가장 인접한 한정점을 제외해서 -2

		u = move(distance, n, found);	//이동한 가장 가까운 정점 번호(u) 
		found[u] = TRUE;	//이동정점 true로 변경

		for (w = 0; w < n; w++) {

			if (!found[w])	//연결정점(출발정점 및 이동한 정점들 제외) 무한반복 방지

				if (distance[u] + weight[u][w] < distance[w]) {	//현재 이동거리 + 현재정점(u)에서 연결정점(w)까지의 거리 < 연결정점(w)까지의 거리면 후자를 전자로 변경
					//distance 는 시작정점 기준 거리이므로 거의 변경됨

					distance[w] = distance[u] + weight[u][w];	//변경

					for (j = 0; j < n; j++) {
						record[w][j] = INT_MIN;	//연결정점 record 초기화
					}

					for (j = 0; j < n; j++) {

						if (record[u][j] != INT_MIN)	//현재정점 레코드 중 이동 기록이 들어간 부분을 연결정점 record로 옮겨준다.
							record[w][j] = record[u][j];

						else break;

					}

					record[w][j] = w;	//현재 위치인 연결정점을 record에 넣어줌

				}
		}
	}
}

void display(int start, int n) {

	int i, j;

	for (i = 0; i < n; i++) {

		if (distance[i] != 9999) {
			printf("출발정점 : %s ---> 도착정점 : %s\n총 거리 : %d\n ", Sub[start].name, Sub[i].name, distance[i]);
			printf("\t경로 : ");
		}

		else {
			printf("출발정점 : %s ---> 도착정점 : %s\n경로 없음", Sub[start].name, Sub[i].name);
		}

		for (j = 0; j < n; j++) {
			if (record[i][j] >= 0)
				printf(" %s -> ", Sub[record[i][j]].name);
		}
		printf("\n\n");
	}
}


int translate(char* str) {	//정점 이름을 정점에 부여된 번호로 변환하는 함수

	int k;
	k = 0;

	for (int i = 0; i < MAX_V; i++) {
		if (strcmp(str, Sub[i].name) != 0)
			k++;
		if (strcmp(str, Sub[i].name) == 0)
			break;
	}
	return k;
}
